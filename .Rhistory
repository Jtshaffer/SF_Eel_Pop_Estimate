View(Dat)
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat[3,3]<- NA
Dat[51,3]<- NA
# Basic function that will fill in missing NA values with the average of the value 24hrs before and after the missing
Dat$new.net<- sapply(Dat[,3],function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
View(Dat)
?sapply
# Scenario 1: if there is an NA then take the average of the net movement 24 hours prior and 24 hours after  # Step 1
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
# Basic function that will fill in missing NA values with the average of the value 24hrs before and after the missing
Dat$new.net<- lapply(Dat[,3],function(x)  # Works if there is only one NA value in the data set.
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
View(Dat)
#Scenario 2: if there are NA values in 24hrs before or after the missing hour.
#             take the un-adjusted daily count and add in an adjustement for the missing hours E.adj = E.unadj + (E.unadj * z/24hrs)     # Step 2
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat[3,3]<- NA
Dat[51,3]<- NA
# Basic function that will fill in missing NA values with the average of the value 24hrs before and after the missing
Dat$new.net<- lapply(Dat[,3],function(x)  # Works if there is only one NA value in the data set.
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
View(Dat)
# Scenario 1: if there is an NA then take the average of the net movement 24 hours prior and 24 hours after  # Step 1
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
# Basic function that will fill in missing NA values with the average of the value 24hrs before and after the missing
Dat$new.net<- sapply(Dat[,3],function(x)  # Works if there is only one NA value in the data set.
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
#Scenario 2: if there are NA values in 24hrs before or after the missing hour.
#             take the un-adjusted daily count and add in an adjustement for the missing hours E.adj = E.unadj + (E.unadj * z/24hrs)     # Step 2
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat[3,3]<- NA
Dat[51,3]<- NA
# Basic function that will fill in missing NA values with the average of the value 24hrs before and after the missing
Dat$new.net<- sapply(Dat[,3],function(x)  # Works if there is only one NA value in the data set.
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
View(Dat)
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day4<- rep(4,24)
Day5<- rep(5,24)
Day6<- rep(6,24)
Day<- c(Day1,Day2,Day3,Day4,Day5,Day6)
Hour<- rep(1:24,6)
Month<- rep(1,length(Day))
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Month= Month, Day= Day,Hour= Hour,Net= Net)
Dat[27,4]<- NA
Dat[3,4]<- NA
Dat[49:96,4]<- NA
# Accounting for single hours down
Dat$new.Net<- sapply(Dat[,'Net'],function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day4<- rep(4,24)
Day5<- rep(5,24)
Day6<- rep(6,24)
Day<- c(Day1,Day2,Day3,Day4,Day5,Day6)
Hour<- rep(1:24,6)
Month<- rep(1,length(Day))
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Month= Month, Day= Day,Hour= Hour,Net= Net)
Dat[27,4]<- NA
Dat[3,4]<- NA
Dat[49:96,4]<- NA
# Accounting for single hours down
Dat$new.Net<- sapply(Dat[,3],function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
View(Dat)
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day4<- rep(4,24)
Day5<- rep(5,24)
Day6<- rep(6,24)
Day<- c(Day1,Day2,Day3,Day4,Day5,Day6)
Hour<- rep(1:24,6)
Month<- rep(1,length(Day))
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Month= Month, Day= Day,Hour= Hour,Net= Net)
Dat[27,4]<- NA
Dat[3,4]<- NA
Dat[49:96,4]<- NA
# Accounting for single hours down
Dat$new.Net<- sapply(Dat[,4],function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
View(Dat)
?apply
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
View(Dat)
apply(Dat[,3],1,function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
apply(Dat,1,function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
Dat$new.net<- apply(Dat,1,function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
apply(Dat,1,function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
View(Dat)
Dat$new.net<- apply(Dat[,3],1,function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
Dat$new.net<- apply(Dat[,3],1,function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
apply(Dat[,3],1,function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
apply(Dat,1,function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
apply(Dat[,3],1:2,function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
apply(Dat[,3],2,function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
library(tidyverse)
library(lubridate)
library(dataRetrieval)
#Read in review data and add Date
Data<- as.data.frame(readxl::read_xlsx("E:/CalTrout/SF_Eel_Didson/Review Data/Review_Data-01-13-23.xlsx"))
Data<- Data %>%
mutate(Hnet = Net * 6) %>%
mutate(Date = paste(Year,Month,Day,Hour, sep = "-")) %>%
mutate(Date = ymd_h(Date))
Data$lessthan40<- apply(Data[8:27],1,function(x){  # Function to remove the counts that are less than 40cm and correct the net counts
sum(x < 40,na.rm = T)
}
)
Data<- Data %>%
mutate(Net.corrected = Net - lessthan40)
# Scenario 1: if there is an NA then take the average of the net movement 24 hours prior and 24 hours after  # Step 1
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat$new.net<- apply(Dat,2,function(x)  # Figure out why the above function above.
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
View(Dat)
#Scenario 2: if there are NA values in 24hrs before or after the missing hour.
#             take the un-adjusted daily count and add in an adjustement for the missing hours E.adj = E.unadj + (E.unadj * z/24hrs)     # Step 2
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat[3,3]<- NA
Dat[51,3]<- NA
View(Dat)
Dat$new.net<- apply(Dat,2,function(x)  # Figure out why the above function above.
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
View(Dat)
#Scenario 2: if there are NA values in 24hrs before or after the missing hour.
#             take the un-adjusted daily count and add in an adjustement for the missing hours E.adj = E.unadj + (E.unadj * z/24hrs)     # Step 2
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat[3,3]<- NA
Dat[51,3]<- NA
Dat[31,3]<- NA
# TMP
Dat[31,3]<- NA
#Scaling up the observations
Dat<- Dat %>%
mutate(hnet= Net*6)
et.seed(1)
Dat$new.net<- apply(Dat,2,function(x)  # Figure out why the above function above.
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
View(Dat)
#Scenario 2: if there are NA values in 24hrs before or after the missing hour.
#             take the un-adjusted daily count and add in an adjustement for the missing hours E.adj = E.unadj + (E.unadj * z/24hrs)     # Step 2
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat[3,3]<- NA
Dat[51,3]<- NA
# TMP
Dat[31,3]<- NA
View(Dat)
Dat$new.net<- apply(Dat,2,function(x)  # Figure out why the above function above.
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
View(Dat)
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat[3,3]<- NA
Dat[51,3]<- NA
Dat[21,3]<- NA
Dat$new.net<- sapply(Dat[,3],2,function(x)  #
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
Dat$new.net<- sapply(Dat[,3],function(x)  #
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
View(Dat)
Dat$new.net<- sapply(Dat[,3],function(x)  #
if_else(is.na(x), mean(c(Dat[which(is.na(x),arr.ind = T)[1]-24,3],Dat[which(is.na(x),arr.ind = T)[1]+24,3])),x))
View(Dat)
Dat[which(is.na(Dat),arr.ind = T)
Dat[which(is.na(Dat))]
which(is.na(Dat))
which(is.na(Dat),arr.ind = T)
Dat[which(is.na(Dat),arr.ind = T)]
Dat[which(is.na(Dat),arr.ind = T)[1]
Dat$new.net<- sapply(Dat[,3],function(x)  #
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[x]-24,3],Dat[which(is.na(Dat),arr.ind = T)[x]+24,3])),x))
View(Dat)
Dat$new.net<- sapply(Dat[,3],function(x)  #
if_else(is.na(x), mean(c(Dat[ which(Dat[,3] == x, arr.ind = T )-24,3],Dat[which(Dat[,3]==x,arr.ind = T)[x]+24,3])),x))
View(Dat)
#Scenario 2: if there are NA values in 24hrs before or after the missing hour.
#             take the un-adjusted daily count and add in an adjustement for the missing hours E.adj = E.unadj + (E.unadj * z/24hrs)     # Step 2
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat[3,3]<- NA
Dat[51,3]<- NA
Dat[21,3]<- NA
Dat$new.net<- sapply(Dat[,3],function(x)  #
if_else(is.na(x), mean(c(Dat[ which(Dat[,3] == x, arr.ind = T )-24,3],Dat[which(Dat[,3]==x,arr.ind = T)[x]+24,3])),x))
View(Dat)
?seq_along
seq_along(Dat[,3])
apply(seq_along(Dat[,3]),1,function(x)  #
if_else(is.na(x), mean(c(Dat[ which(Dat[,3][1], arr.ind = T )-24,3],Dat[which(Dat[,3][1],arr.ind = T)[x]+24,3])),x))
sapply(1:nrow(Dat[,3]),function(x)  #
if_else(is.na(x), mean(c(Dat[ which(Dat[,3] == x, arr.ind = T )-24,3],Dat[which(Dat[,3]==x,arr.ind = T)[x]+24,3])),x))
1:nrow(Dat[,3])
nrow(Dat[,3])
nrow(Dat)
apply(1:nrow(Dat),function(x)  #
if_else(is.na(x), mean(c(Dat[ which(Dat[,3] == x, arr.ind = T )-24,3],Dat[which(Dat[,3]==x,arr.ind = T)[x]+24,3])),x))
sapply(1:nrow(Dat),function(x)
if_else(is.na(x), mean(c(Dat[ which(Dat[,3] == x, arr.ind = T )-24,3],Dat[which(Dat[,3]==x,arr.ind = T)[x]+24,3])),x))
sapply(Dat[,3],function(x)  #
if_else(is.na(x), mean(c(Dat[ which(Dat[,3] == x, arr.ind = T )-24,3],Dat[which(Dat[,3]==x,arr.ind = T)[x]+24,3])),x))
sapply(Dat[,3],function(x)  #
if_else(is.na(x) & !row_number(x) %in% 1:24, mean(c(Dat[ which(Dat[,3] == x, arr.ind = T )-24,3],Dat[which(Dat[,3]==x,arr.ind = T)[x]+24,3])),x))
View(Dat)
tail(Dat,24)
head(Dat,24)
View(Dat)
row_number(head(Dat,24))
rownames(head(Dat,24))
Dat$new.net<- sapply(Dat[,3],function(x)  #
if_else(is.na(x) & !row_number(x) %in% rownames(head(Dat,24)) & !row_number(x) %in% rownames(tail(Dat,24))), mean(c(Dat[ which(Dat[,3] == x, arr.ind = T )-24,3],Dat[which(Dat[,3]==x,arr.ind = T)[x]+24,3])),x)
Dat$new.net<- sapply(Dat[,3],function(x)  #
if_else(is.na(x) & !row_number(x) %in% rownames(head(Dat,24)) & !row_number(x) %in% rownames(tail(Dat,24))), mean(c(Dat[ which(Dat[x,3], arr.ind = T )-24,3],Dat[which(Dat[x,3],arr.ind = T)[x]+24,3])),x)
sapply(Dat[,3],function(x)  #
if_else(is.na(x) & !row_number(x) %in% rownames(head(Dat,24)) & !row_number(x) %in% rownames(tail(Dat,24))), mean(c(Dat[ which(Dat[x,3], arr.ind = T )-24,3],Dat[which(Dat[x,3],arr.ind = T)[x]+24,3])),x)
View(Dat)
Dat$new.net<- sapply(Dat[,3],function(x)  #
if_else(is.na(x) & !row_number(x) %in% rownames(head(Dat,24)) & !row_number(x) %in% rownames(tail(Dat,24))), mean(c( Dat[ which(Dat[,3]== rownames(x), arr.ind = T )-24,3],Dat[which(Dat[,3]== rownames(x),arr.ind = T)[x]+24,3])),x)
Dat$new.net<- sapply(Dat[,3],function(x)
if_else(is.na(x) & !row_number(x) %in% rownames(head(Dat,24)) & !row_number(x) %in% rownames(tail(Dat,24))), mean(c( Dat[ which(Dat[,3]== rownames(x), arr.ind = T )-24,3],Dat[which(Dat[,3]== rownames(x),arr.ind = T)[x]+24,3])),x)
sapply(Dat[,3],function(x)
if_else(is.na(x) & !row_number(x) %in% rownames(head(Dat,24)) & !row_number(x) %in% rownames(tail(Dat,24))), mean(c( Dat[ which(Dat[,3]== rownames(x), arr.ind = T )-24,3],Dat[which(Dat[,3]== rownames(x),arr.ind = T)[x]+24,3])),x)
sapply(Dat[,3],function(x) rownames(x))
sapply(Dat[,3],function(x) row_number(x))
sapply(Dat[,3],function(x)  # original
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[x]-24,3],Dat[which(is.na(Dat),arr.ind = T)[x]+24,3])),x))
#Scenario 2: if there are NA values in 24hrs before or after the missing hour.
#             take the un-adjusted daily count and add in an adjustement for the missing hours E.adj = E.unadj + (E.unadj * z/24hrs)     # Step 2
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat[3,3]<- NA
Dat[51,3]<- NA
Dat[21,3]<- NA
Dat$new.net<- sapply(Dat[,3],function(x)  # original
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[x]-24,3],Dat[which(is.na(Dat),arr.ind = T)[x]+24,3])),x))
View(Dat)
seq_along(Dat[,3])
Dat$new.net<- sapply(seq_along(Dat[,3]),function(x)  # original
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[x]-24,3],Dat[which(is.na(Dat),arr.ind = T)[x]+24,3])),x))
View(Dat)
sapply(seq_along(Dat[,3]),function(x)  # original
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
is.na(Dat)
which(is.na(Dat),arr.ind = T)
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat[3,3]<- NA
Dat[51,3]<- NA
Dat[21,3]<- NA
sapply(seq_along(Dat[,3]),function(x)  # original
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
rlang::last_error()
rlang::last_trace()
sapply(seq_along(Dat[,3]),function(x)
if_else(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
sapply(seq_along(Dat[,3]),function(x)
ifelse(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
seq_along(Dat[,3])
sapply(Dat[,3],function(x)
ifelse(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[1]-24,3],Dat[which(is.na(Dat),arr.ind = T)[1]+24,3])),x))
sapply(Dat[,3],function(x)
ifelse(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[3]-24,3],Dat[which(is.na(Dat),arr.ind = T)[3]+24,3])),x))
which(is.na(Dat),arr.ind = T)[3]
sapply(Dat[,3],function(x)
ifelse(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[3]-24,3],Dat[which(is.na(Dat),arr.ind = T)[3]+24,3])),x))
Dat[which(is.na(Dat),arr.ind = T)[3]-24,3]
set.seed(1)
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat[3,3]<- NA
Dat[51,3]<- NA
Dat[31,3]<- NA
sapply(Dat[,3],function(x)
ifelse(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[3]-24,3],Dat[which(is.na(Dat),arr.ind = T)[3]+24,3])),x))
Dat$new.net<-sapply(Dat[,3],function(x)
ifelse(is.na(x), mean(c(Dat[which(is.na(Dat),arr.ind = T)[3]-24,3],Dat[which(is.na(Dat),arr.ind = T)[3]+24,3])),x))
View(Dat)
?which
Dat$new.net<-sapply(Dat[,3],function(x)
ifelse(is.na(x), mean(c(Dat[which(x,arr.ind = T)[1]-24,3],Dat[which(x,arr.ind = T)[1]+24,3])),x))
sapply(Dat[,3],function(x)
ifelse(is.na(x), mean(c(Dat[which(row(Dat)==row(x),arr.ind = T)[1]-24,3],Dat[which(row(Dat)== row(x),arr.ind = T)[1]+24,3])),x))
row(Dat)
t?
?t
gput()
matrix(NA,nrow = 10,ncol = 3)
Day<- rep(seq(1:3),24)
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat[3,3]<- NA
Dat[51,3]<- NA
Dat[31,3]<- NA
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(1:24,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat[3,3]<- NA
Dat[51,3]<- NA
Dat[31,3]<- NA
Dat
#Data Creation
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(0:23,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
Dat[27,3]<- NA
Dat[3,3]<- NA
Dat[51,3]<- NA
Dat[31,3]<- NA
Dat
library(zoo)
?na.approx
Day1<- rep(1,24)
Day2<- rep(2,24)
Day3<- rep(3,24)
Day<- c(Day1,Day2,Day3)
Hour<- rep(0:23,3)
Net <- round(rnorm(length(Day),mean = 2))
Dat<- data.frame(Day= Day,Hour= Hour,Net= Net)
#Populate missing observations
Dat[27,3]<- NA
Dat[31,3]<- NA
Dat
na.approx(Dat[,3],1:24)
na.approx(Dat[,3])
Dat$new.net<- na.approx(Dat[,3])
Dat
na.aprox
na.aprox()
na.approx()
na.approx
??na.approx
getAnywhere(na.approx)
zoo:::na.approx()
zoo:::na.approx
getMethod(na.approx)
getMethod(na.approx())
showMethods(na.approx)
UseMethod(na.approx())
UseMethod(na.approx
UseMethod(na.approx)
getAnywhere(na.approx)
na.approx
?rollapply
